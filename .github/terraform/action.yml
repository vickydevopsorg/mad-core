name: Terraform Plan & apply
description: Creates terraform plan and optionally applies it
inputs:
    environment:
      description: Deployment environment (nonprd/preprd/prd)
      required: true
      type: string
      default: nonprd
    tf_path:
      description: Path to the Terraform configuration
      type: string
      required: false

runs:
  using: "composite"
  
  steps:
     - name: Read properties from tf-file
       shell: bash
       working-directory: ${{ inputs.tf_path }}
       run: |
          pwd
          ls -l

    #  - name: Printing all configs
    #    shell: bash
    #    working-directory: ${{ inputs.tf_path }}
    #    run: |
    #       echo "===== backend ==="
    #       cat ../backends/${{ inputs.environment }}.tfbackend
    #       echo "===== config ==="
    #       cat config.yaml
        # while read -r line || [[ $line ]]; do
          #     echo $line | tr -d \" | tr -d ' ' >> $GITHUB_ENV
          # done < '../backends/${{ inputs.environment }}.tfbackend'
      
    #  - name: Azure Login
    #    uses: azure/login@v2
    #    with:
    #       client-id: ${{ env.client_id }}
    #       tenant-id: ${{ env.tenant_id }}
    #       subscription-id: ${{ env.subscription_id }}
    #  - uses: hashicorp/setup-terraform@v3.0.0
    #    with:
    #       terraform_wrapper: false

    #  - name: Terraform Init
    #    working-directory: ${{ inputs.deployment_target }}
    #    shell: bash
    #    id: init
    #    run: terraform init --backend-config='.././backends/${{ inputs.environment }}.tfbackend'

    #  - name: Terraform Validate
    #    working-directory: ${{ inputs.deployment_target }}
    #    shell: bash
    #    id: validate
    #    run: terraform validate -no-color

    #  - name: Terraform Plan
    #    working-directory: ${{ inputs.deployment_target }}
    #    shell: bash
    #    id: plan
    #    run: |
    #     export exitcode=0
    #     terraform plan -detailed-exitcode -no-color -out tfplan  || export exitcode=$?

    #     echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

    #     if [ $exitcode -eq 1 ]; then
    #       echo Terraform Plan Failed!
    #       exit 1
    #     else 
    #       exit 0
    #     fi

    # # Save plan to artifacts  
    #  - name: Publish Terraform Plan
    #    uses: actions/upload-artifact@v4
    #    with:
    #     name: tfplan
    #     path: ./${{ inputs.deployment_target }}/tfplan

    # # Create string output of Terraform Plan
    #  - name: Create String Output
    #    working-directory: ${{ inputs.deployment_target }}
    #    shell: bash
    #    id: tf-plan-string
    #    run: |
    #     TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
    #     delimiter="$(openssl rand -hex 8)"
    #     echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
    #     echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
    #     echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
    #     echo "" >> $GITHUB_OUTPUT
    #     echo '```terraform' >> $GITHUB_OUTPUT
    #     echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
    #     echo '```' >> $GITHUB_OUTPUT
    #     echo "</details>" >> $GITHUB_OUTPUT
    #     echo "${delimiter}" >> $GITHUB_OUTPUT

    # # Publish Terraform Plan as task summary
    #  - name: Publish Terraform Plan to Task Summary
    #    shell: bash
    #    env:
    #     SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
    #    run: |
    #     echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY


    # # If this is a PR post the changes
    #  - name: Push Terraform Output to PR
    #    if: github.ref != 'refs/heads/main'
    #    uses: actions/github-script@v7
    #    env:
    #     SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
    #    with:
    #       script: |
    #         const body = `${process.env.SUMMARY}`;
    #         github.rest.issues.createComment({
    #             issue_number: context.issue.number,
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             body: body
    #         })