name: Terraform plan and apply

on:
  workflow_call: 
    inputs:
      environment:
        description: 'Deployment environment (nonprd/preprd/prd)'
        type: string
        required: true
      deployment_target:
        description: 'Deployment target (central-comp)'
        type: string
        required: true
      opco:
        description: 'opco directory'
        type: string
        required: true
      mad_version:
        description: 'mad-core ref'
        type: string
        required: false
        default: 'main'
jobs:
  mad-core:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        name: mad-core checkout
        id: mad-core
        with:
          repository: vickydevopsorg/mad-core
          ref: ${{ inputs.mad_version }}
          path: mad-core

      - name: merge-config
        id: config
        shell: bash
        run: |
          echo "config.yml update"
          yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' ./${{ inputs.opco }}/${{ inputs.deployment_target }}/${{ inputs.environment }}-config.yaml ./${{ inputs.opco }}/${{ inputs.deployment_target }}/project-config.yaml > final_config.yaml
          cat final_config.yaml > mad-core/${{ inputs.deployment_target }}/config.yaml
        
          cat ./${{ inputs.opco }}/backends/${{ inputs.environment }}.tfbackend > ./mad-core/backends/${{ inputs.environment }}.tfbackend
      
      # - name: test
      #   run: |
      #     echo "test"
      #     pwd
      #     cat ./.github/actions/terraform/action.yml
      - name: Terraform plan
        uses: ./.github/actions/terraform
        with:
          environment: ${{ inputs.environment }}
          tf_path: ${{ inputs.deployment_target }}

      # - name: Read properties from tf-file
      #   shell: bash
      #   working-directory: ${{ inputs.opco }}
      #   run: |
      #     while read -r line || [[ $line ]]; do
      #         echo $line | tr -d \" | tr -d ' ' >> $GITHUB_ENV
      #     done < './backends/${{ inputs.environment }}.tfbackend'
      
      # - name: Azure Login
      #   uses: azure/login@v2
      #   with:
      #     client-id: ${{ env.client_id }}
      #     tenant-id: ${{ env.tenant_id }}
      #     subscription-id: ${{ env.subscription_id }}
      
      # - name: Terraform Init
      #   working-directory: ${{ inputs.deployment_target }}
      #   shell: bash
      #   id: init
      #   run: terraform init --backend-config='.././backends/${{ inputs.environment }}.tfbackend'

      # - name: Terraform Validate
      #   working-directory: ${{ inputs.deployment_target }}
      #   shell: bash
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   working-directory: ${{ inputs.deployment_target }}
      #   shell: bash
      #   id: plan
      #   run: |
      #     export exitcode=0
      #     terraform plan -detailed-exitcode -no-color -out tfplan  || export exitcode=$?

      #     echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

      #     if [ $exitcode -eq 1 ]; then
      #       echo Terraform Plan Failed!
      #       exit 1
      #     else 
      #       exit 0
      #     fi

      #   # Save plan to artifacts  
      # - name: Publish Terraform Plan
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tfplan
      #     path: ./${{ inputs.deployment_target }}/tfplan

      # # Create string output of Terraform Plan
      # - name: Create String Output
      #   working-directory: ${{ inputs.deployment_target }}
      #   shell: bash
      #   id: tf-plan-string
      #   run: |
      #     TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
      #     delimiter="$(openssl rand -hex 8)"
      #     echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
      #     echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
      #     echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
      #     echo "" >> $GITHUB_OUTPUT
      #     echo '```terraform' >> $GITHUB_OUTPUT
      #     echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
      #     echo '```' >> $GITHUB_OUTPUT
      #     echo "</details>" >> $GITHUB_OUTPUT
      #     echo "${delimiter}" >> $GITHUB_OUTPUT

      # # Publish Terraform Plan as task summary
      # - name: Publish Terraform Plan to Task Summary
      #   shell: bash
      #   env:
      #     SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      #   run: |
      #     echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY


      # # If this is a PR post the changes
      # - name: Push Terraform Output to PR
      #   if: github.ref != 'refs/heads/main'
      #   uses: actions/github-script@v7
      #   env:
      #     SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      #   with:
      #       script: |
      #         const body = `${process.env.SUMMARY}`;
      #         github.rest.issues.createComment({
      #             issue_number: context.issue.number,
      #             owner: context.repo.owner,
      #             repo: context.repo.repo,
      #             body: body
      #         }) 